[project]
name = "fluffy_system"
dynamic = ["version"]
description = "Flask API Gateway for microservices"
authors = [
    {name = "Farai Wande", email = "faraiwande@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["api-gateway", "microservices", "flask"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Framework :: Flask",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

[tool.poetry]
name = "fluffy_system"
version = "1.2.12"
description = "Flask API Gateway for microservices"
authors = ["Farai Wande <faraiwande@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = ["api-gateway", "microservices", "flask", "turbogate"]
packages = [{include = "fluffy_system"}]

[tool.poetry.dependencies]
python = "^3.12"
flask = "^3.1.1"
flask-restx = "^1.3.0"
requests = "^2.31.0"
redis = "^5.0.1"
python-dotenv = "^1.0.0"
pyjwt = "^2.8.0"
werkzeug = "^3.0.1"
structlog = "^23.2.0"
python-json-logger = "^2.0.7"
click = "^8.1.7"
gevent = "25.5.1"
gunicorn = "^23.0.0"
flask-cors = "^6.0.1"

[tool.poetry.group.dev.dependencies]
commitizen = "^4.8.3"
pytest = "^7.4.4"
pytest-cov = "^4.1.0"
pytest-flask = "^1.3.0"
black = "^23.12.1"
isort = "^5.13.2"
flake8 = "^7.0.0"
ruff = "^0.8.4"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
httpx = "^0.26.0"
faker = "^22.0.0"
debugpy = "^1.8.14"

[tool.poetry.group.test.dependencies]
pytest-asyncio = "^0.23.2"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
coverage = "^7.4.0"

[tool.poetry.scripts]
turbogate = "fluffy_system.app:cli"
dev-server = "scripts.run_dev:main"
health-check = "scripts.health_check:main"

[tool.commitizen]
name = "cz_customize"
tag_format = "v$version"
version_scheme = "semver2"
version = "1.5.2"
version_files = [
    "pyproject.toml:version",
    "fluffy_system/__init__.py:__version__"
]
update_changelog_on_bump = true

[tool.commitizen.customize]
schema_pattern = "^(build|bump|docs|feat|fix|refactor|chore|test|style|perf|ci):(\\s.*)"
changelog_pattern = "^(build|docs|feat|fix|refactor|chore|test|style|perf|ci):(\\s.*)"
commit_parser = "^(?P<change_type>build|bump|docs|feat|fix|refactor|chore|test|style|perf|ci):\\s(?P<message>.*)?"
change_type_order = ["feat", "fix", "perf", "build", "refactor", "test", "style", "chore", "docs", "ci"]

[tool.commitizen.customize.bump_map]
feat = "MINOR"
fix = "PATCH"
perf = "PATCH"
build = "PATCH"
docs = "PATCH"
refactor = "PATCH"
test = "PATCH"
style = "PATCH"
chore = "PATCH"
ci = "PATCH"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fluffy_system"]
known_third_party = ["flask", "redis", "requests"]

[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".tox",
    ".venv",
    "build",
    "dist",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.isort]
known-first-party = ["fluffy_system"]
known-third-party = ["flask", "redis", "requests"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_column_numbers = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "flask_restx.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["fluffy_system"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"