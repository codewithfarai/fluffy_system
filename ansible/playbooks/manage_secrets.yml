---
- name: Manage Docker Swarm Secrets
  hosts: managers[0]
  become: yes
  vars:
    secrets_operation: "{{ operation | default('list') }}"  # list, create, update, remove
    secret_name: "{{ secret_name_var | default('') }}"
    secret_value: "{{ secret_value_var | default('') }}"
    secret_file: "{{ secret_file_var | default('') }}"
    secrets_dir: "/opt/docker/secrets"
    
  pre_tasks:
    - name: Validate operation
      fail:
        msg: "Invalid operation. Must be one of: list, create, update, remove"
      when: secrets_operation not in ['list', 'create', 'update', 'remove']

    - name: Validate secret name for create/update/remove operations
      fail:
        msg: "Secret name is required for {{ secrets_operation }} operation"
      when: 
        - secrets_operation in ['create', 'update', 'remove']
        - secret_name == ''

    - name: Validate secret value or file for create/update operations
      fail:
        msg: "Either secret_value or secret_file must be provided for {{ secrets_operation }} operation"
      when:
        - secrets_operation in ['create', 'update']
        - secret_value == ''
        - secret_file == ''

  tasks:
    - name: Create secrets directory
      file:
        path: "{{ secrets_dir }}"
        state: directory
        mode: '0755'
      when: secrets_operation in ['create', 'update']

    - name: List all Docker secrets
      shell: docker secret ls --format "table {{ "{{" }}.Name{{ "}}" }}\t{{ "{{" }}.CreatedAt{{ "}}" }}\t{{ "{{" }}.UpdatedAt{{ "}}" }}"
      register: secrets_list
      when: secrets_operation == 'list'

    - name: Check if secret exists
      shell: docker secret ls --filter name={{ secret_name }} --format "{{ "{{" }}.Name{{ "}}" }}"
      register: secret_exists
      changed_when: false
      when: secrets_operation in ['create', 'update', 'remove']

    - name: Fail if secret already exists for create operation
      fail:
        msg: "Secret '{{ secret_name }}' already exists. Use 'update' operation to modify it."
      when:
        - secrets_operation == 'create'
        - secret_exists.stdout == secret_name

    - name: Fail if secret doesn't exist for update/remove operations
      fail:
        msg: "Secret '{{ secret_name }}' does not exist."
      when:
        - secrets_operation in ['update', 'remove']
        - secret_exists.stdout != secret_name

    - name: Create secret from value
      shell: echo "{{ secret_value }}" | docker secret create {{ secret_name }} -
      register: create_result
      when:
        - secrets_operation == 'create'
        - secret_value != ''
        - secret_file == ''

    - name: Create secret from file
      shell: docker secret create {{ secret_name }} {{ secret_file }}
      register: create_file_result
      when:
        - secrets_operation == 'create'
        - secret_file != ''

    - name: Backup current secret for update
      shell: |
        # Get secret content (this is for logging purposes only)
        docker secret inspect {{ secret_name }} --format "{{ "{{" }}.Spec.Name{{ "}}" }}" > {{ secrets_dir }}/{{ secret_name }}_backup_{{ ansible_date_time.epoch }}.info
        echo "{{ ansible_date_time.iso8601 }}" >> {{ secrets_dir }}/{{ secret_name }}_backup_{{ ansible_date_time.epoch }}.info
      when: secrets_operation == 'update'

    - name: Update secret (remove and recreate)
      block:
        - name: Get services using this secret
          shell: |
            docker service ls --format "{{ "{{" }}.Name{{ "}}" }}" | while read service; do
              if docker service inspect $service --format "{{ "{{" }}.Spec.TaskTemplate.ContainerSpec.Secrets{{ "}}" }}" 2>/dev/null | grep -q "{{ secret_name }}"; then
                echo $service
              fi
            done
          register: services_using_secret

        - name: Remove old secret
          shell: docker secret rm {{ secret_name }}
          
        - name: Create new secret from value
          shell: echo "{{ secret_value }}" | docker secret create {{ secret_name }} -
          when: secret_value != '' and secret_file == ''
          
        - name: Create new secret from file
          shell: docker secret create {{ secret_name }} {{ secret_file }}
          when: secret_file != ''

        - name: Update services using the secret
          shell: docker service update --secret-rm {{ secret_name }} --secret-add {{ secret_name }} {{ item }}
          loop: "{{ services_using_secret.stdout_lines }}"
          when: services_using_secret.stdout_lines | length > 0
          
      when: secrets_operation == 'update'

    - name: Remove secret
      block:
        - name: Check services using this secret before removal
          shell: |
            docker service ls --format "{{ "{{" }}.Name{{ "}}" }}" | while read service; do
              if docker service inspect $service --format "{{ "{{" }}.Spec.TaskTemplate.ContainerSpec.Secrets{{ "}}" }}" 2>/dev/null | grep -q "{{ secret_name }}"; then
                echo $service
              fi
            done
          register: services_using_secret_remove
          
        - name: Fail if secret is in use
          fail:
            msg: |
              Cannot remove secret '{{ secret_name }}' - it is being used by the following services:
              {{ services_using_secret_remove.stdout_lines | join(', ') }}
              Please remove the secret from these services first.
          when: services_using_secret_remove.stdout_lines | length > 0
          
        - name: Remove secret
          shell: docker secret rm {{ secret_name }}
          register: remove_result
          
      when: secrets_operation == 'remove'

    - name: Create operation log
      copy:
        content: |
          Docker Secrets Operation Log
          ============================
          
          Operation: {{ secrets_operation }}
          Date: {{ ansible_date_time.iso8601 }}
          Secret Name: {{ secret_name | default('N/A') }}
          
          {% if secrets_operation == 'list' %}
          Available Secrets:
          {{ secrets_list.stdout }}
          {% elif secrets_operation == 'create' %}
          Result: {{ 'SUCCESS' if (create_result.rc == 0 or create_file_result.rc == 0) else 'FAILED' }}
          Source: {{ 'Value' if secret_value != '' else 'File: ' + secret_file }}
          {% elif secrets_operation == 'update' %}
          Result: SUCCESS - Secret updated and services restarted
          Source: {{ 'Value' if secret_value != '' else 'File: ' + secret_file }}
          Services affected: {{ services_using_secret.stdout_lines | join(', ') if services_using_secret.stdout_lines | length > 0 else 'None' }}
          {% elif secrets_operation == 'remove' %}
          Result: {{ 'SUCCESS' if remove_result.rc == 0 else 'FAILED' }}
          {% endif %}
        dest: "{{ secrets_dir }}/operation_log_{{ ansible_date_time.epoch }}.txt"
        mode: '0644'

    - name: Display operation results
      debug:
        msg: |
          {% if secrets_operation == 'list' %}
          Available Docker Secrets:
          {{ secrets_list.stdout_lines }}
          {% elif secrets_operation == 'create' %}
          Secret '{{ secret_name }}' created successfully!
          {% elif secrets_operation == 'update' %}
          Secret '{{ secret_name }}' updated successfully!
          Services affected: {{ services_using_secret.stdout_lines | join(', ') if services_using_secret.stdout_lines | length > 0 else 'None' }}
          {% elif secrets_operation == 'remove' %}
          Secret '{{ secret_name }}' removed successfully!
          {% endif %}

  post_tasks:
    - name: Clean up old operation logs
      find:
        paths: "{{ secrets_dir }}"
        patterns: "operation_log_*.txt"
        age: "30d"
      register: old_logs
      
    - name: Remove old log files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_logs.files }}"
      when: old_logs.files is defined